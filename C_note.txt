/* learning C Notes */
Second:
		转化为机器可执行的过程：预处理——编译——链接
		简单程序的通用形式：指令、函数、语句
		注释：/*       */
		变量与赋值：变量类型、声明；变量的显示用占位符；变量的初始化；表达式的值。
		读入输入：scanf
		定义常量：#define 宏定义 可以定义常量和表达式。
		标识符：变量、函数、宏等实体的命名。
		关键字：命名规避，
		C语言程序的布局：允许插入任意数量的间隔，如空格、制表符和换行符。字符串不能简单的换行，需要连接。
		
		Tips：	整数相乘会自动丢掉小数部分；

Third：
		printf & scanf 包含普通字符和转换说明
		转换说明：%m.pX，m是最小字段宽度，p是精度。
				%d %e %f %g
		转义序列：警报符\a，回退符\b，换行符\n，横向制表符\t，注意制表符是自动判断间隔数的。
												比如，假定某个字符串在制表符\t的前面有n个字符，那么\t将跳过8-n%8个空格。或者不是“8”
		scanf 函数的工作方法：本质上是一种“模式匹配”函数，也就试图把输入的字符组与转换说明匹配成组。
								对于格式串中的每一个转换说明，scanf函数努力从输入的数据中定位适当类型的项，并且跳过必要的空格。
								然后读入数据项，并且在遇到不可能属于此项的字符时停止。如果读入成功继续处理格式串剩余部分，不成功立即返回。
								寻找起始位置时，scanf忽略空白字符，scanf忽略最后的空白，没有真正读取它，是下次scanf调用的第一个字符。
							在使用scanf时，%e,%f,%g是可以互换的。
							当是scanf遇到的字符不是当前项的内容时，会把此字符“放回原处”，在扫描下一个输入项时或者在下一次调用scanf函数时，
							才会再次读入此字符。
							scanf中格式串的普通字符：
									空白字符和其他字符。其中，空白字符可以是一对一、一对多、多对一、多对多，而且可以不同对不同，
									甚至在空白符后面有其他字符时，可以不用输入空白符。
									如果格式串种有普通字符，在输入时相应位置也要有，空白字符可以随便配对，其他字符必须一致。
Forth：
		表达式：运算符and操作数
		基本运算符：算术运算符、关系运算符、逻辑运算符
		算术运算符：正负号、加减乘除、取余。除取余外，其他都是既允许整数也允许浮点数，或者混用，int与float混用，结果是float，%要求都是整数。
					当运算符/和%用于负的操作数时，其结果与具体实现有关。
					运算符的优先级和结合性：正负号 >（* / %）> (加减)；二元运算符是左结合，一元运算符是右结合。
		赋值运算符：赋值在C语言中是运算符，赋值表达式的值就是赋值运算后等号左边的值。
					简单赋值：“=”，v=e，如果e的类型与v不同，会把e的值自动转化成v的类型。“=”有副作用，它可以改变运算符左边的操作数的值，
							表达式i=0产生的结果为0，作为副作用，把0赋值给i。
							运算符“=”是右结合。
					左值：赋值运算符要求它左边的操作数必须是左值（左值表示存储在计算机内存中的对象，而不是常量或计算结果。）
					复合赋值：“+=”，“-=”，“*=”，“/=”，“%=”等等，也是右结合，复合赋值运算符和简单赋值运算符的优先级不同。
					自增自减运算符：“++”、“--”，有前缀和后缀之分，也有副作用。
									表达式++i的结果是i+1，副作用是i自增1；
									表达式i++的结果是i，随后的副作用是i自增1。
									后缀优先级高于一元正负号，且都是左结合。
									前缀优先级与一元正负号相同，且都是右结合。
		表达式求值：顺序（优先级和结合性）。一般地，子表达式的求值顺序无法确定，当子表达式改变了某操作数的值时，产生的值就可能不一致。
					子表达式：a = 5;    c = (b = a + 2) - (a = 1);可能出现不同的值
		表达式语句：任何表达式都可以用来作为语句（添个“;”）

/*******************************************************************************
*语句：return语句；表达式语句；选择语句；循环语句；跳转语句；复合语句；空语句。*
*******************************************************************************/
		
Fifth：	选择语句：
					逻辑表达式：C语言没有特殊的bool型，判断表达式都是0（假值）和1（真值）
						关系运算符：<, >, <=, >=。优先级低于算术运算符，关系运算符都是左结合。
						判等运算符：==, !=。左结合，产生0或1，优先级低于关系运算符。
						逻辑运算符：!, &&, ||。产生0或1，将任何非零值操作数作为真值，将任何零值操作数作为假值。
									!表达式 表达式为0，则为1，表达式非0，则为0
									“&&”和“||”都是“短路”计算，只要左侧的真假可以得出整个的真假，右侧就不执行了。
					if语句：“if(表达式) 语句”
						复合语句：{表达式1; 表达式2;}
						else子句：
						级联式if语句：判断一系列条件，只要一个为真就立刻停止。
										if ()
											语句
										else if ()
											语句
										else
											语句
						“悬空else”的问题：else子句属于离它最近的且还未和其他else匹配的if语句。可以使用{}把内存if括起来，来解决这个问题。
										if () {
											if ()
												语句
										}else
											语句
						条件表达式：条件运算符 ? 和 : 组成。[条件表达式] 表达式1 ? 表达式2 : 表达式3  （其实整个只是个表达式，可以将值赋给变量）
									条件运算符优先等级较低，接近赋值运算符“=”。
						布尔值：#define BOOL int
								#define TRUE 1
								#define FALSE 0
					switch 语句：比级联if易读，且执行的更快。
								switch (表达式) {
									case 常量表达式 : 多条语句
									...
									default : 多条语句
								}
								表达式必须是整型，字符也是当成整型来处理，但不可以是浮点数和字符串
								常量表达式不能包含变量和函数调用，整型。
								语句一般以break;结尾。
								case后面只可以跟随一个常量表达式，但是，几个case可以共用同一组语句。这时，多个case可以放在同一行中。
								default可有可无。

Sixth：	循环：while用于判定控制表达式在循环体执行之前的循环；do用于判定控制表达式在循环体执行之后的循环；for对于自增或自减计数变量的循环。
				break将执行交给循环后的下一条语句，continue用来跳过循环重复的剩余部分，goto可以跳到函数内任何语句上。
				
				while语句：while (表达式) 语句
				do语句：do 语句 while (表达式);
				
				
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
		
							
		
		